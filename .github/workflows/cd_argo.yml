name: CD Argo Deployment

on:
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Type "yes" to deploy ArgoCD and the Monitoring stack'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out Repository
      - name: Check out Repository
        uses: actions/checkout@v3

      # Step 2: Create GCP Credentials File for ArgoCD
      - name: Create GCP Credentials File for ArgoCD
        run: |
          mkdir -p argocd
          echo "${{ secrets.GCP_CREDENTIALS_FILE_B64 }}" | base64 --decode > argocd/gcp_credentials.json
          echo "âœ… GCP credentials file created in argocd/"

      # Step 3: Set up Cloud SDK for ArgoCD
      - name: Set up Cloud SDK for ArgoCD
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key_file: argocd/gcp_credentials.json
          export_default_credentials: true

      # Step 4: Get GKE Credentials for ArgoCD
      - name: Get GKE Credentials for ArgoCD
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: gym-cluster
          location: ${{ secrets.GCP_REGION }}
          project_id: ${{ secrets.GCP_PROJECT }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: argocd/gcp_credentials.json

      # Step 5: Install ArgoCD (includes CRDs)
      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd || echo "Namespace argocd already exists."
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml --validate=false

      # Step 6: Wait for ArgoCD Server to be Ready
      - name: Wait for ArgoCD Server to be Ready
        run: |
          echo "Waiting for ArgoCD server deployment to be available (timeout: 300s)..."
          if ! kubectl wait --for=condition=Available deployment/argocd-server -n argocd --timeout=300s; then
            echo "Warning: ArgoCD server did not become available within 300s. Proceeding anyway."
          fi

      - name: Apply ArgoCD LoadBalancer Service
        run: |
            echo "Applying ArgoCD LoadBalancer service manifest..."
            kubectl apply -n argocd -f argocd/argocd-server-lb.yaml --validate=false
            echo "Polling for external IP (max 60s)..."
            for i in {1..6}; do
              LB_IP=$(kubectl get svc argocd-server-lb -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              if [ -n "$LB_IP" ]; then
                echo "ArgoCD is available at: http://${LB_IP}:80"
                exit 0
              fi
              echo "External IP not available yet, waiting 10 seconds..."
              sleep 10
            done
            echo "ArgoCD LB service did not obtain an external IP after 60s."
        
        # Create Monitoring Namespace
      - name: Create Monitoring Namespace
        run: |
            kubectl create namespace monitoring || echo "Namespace monitoring already exists."


      # Step 8: Deploy Monitoring Apps via ArgoCD  
      # (Ensure your Application manifests in argocd/apps set metadata.namespace to "argocd" and targetRevision to your branch, e.g. "main")
      - name: Deploy Monitoring Apps via ArgoCD
        run: |
          echo "Deploying Monitoring Apps via ArgoCD..."
          kubectl apply -n argocd -f argocd/apps/prometheus.yaml --validate=false
          kubectl apply -n argocd -f argocd/apps/grafana.yaml --validate=false
          kubectl apply -n argocd -f argocd/apps/loki.yaml --validate=false
      
        # Step 8.1: Deploy Grafana Dashboards
      - name: Deploy Grafana Dashboards
        run: |
          echo "Deploying Grafana Dashboards..."
          kubectl apply -n monitoring -f argocd/grafana/dashboards/flask-dashboard.yaml --validate=false
          kubectl apply -n monitoring -f argocd/grafana/dashboards/loki-dashboard.yaml --validate=false


      # Step 9: Wait for Monitoring Deployments Rollout
      - name: Wait for Monitoring Deployments Rollout
        run: |
          echo "Waiting for Grafana deployment rollout (timeout: 300s)..."
          kubectl rollout status deployment/grafana -n monitoring --timeout=300s || echo "Grafana deployment timeout, proceeding."
          echo "Waiting for Prometheus deployment rollout (timeout: 300s)..."
          kubectl rollout status deployment/prometheus-kube-prometheus-stack-prometheus -n monitoring --timeout=300s || echo "Prometheus deployment timeout, proceeding."
          echo "Waiting for Loki deployment rollout (timeout: 300s)..."
          kubectl rollout status deployment/loki -n monitoring --timeout=300s || echo "Loki deployment timeout, proceeding."

      # Step 10: Output ArgoCD Server URL for external access
      - name: Output ArgoCD Server URL
        run: |
          ARGOCD_IP=$(kubectl get svc argocd-server-lb -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -n "$ARGOCD_IP" ]; then
            echo "ArgoCD is available at: http://${ARGOCD_IP}:80"
          else
            echo "ArgoCD external IP not found."
          fi
