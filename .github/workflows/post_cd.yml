name: Post-CD Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "yes" to confirm destruction'
        required: true

jobs:
  destroy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 1. Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # 3. Decode and create GCP credentials file
      - name: Create GCP Credentials File
        run: |
          mkdir -p terraform
          echo "${{ secrets.GCP_CREDENTIALS_FILE_B64 }}" | base64 --decode > terraform/gcp_credentials.json
          jq . terraform/gcp_credentials.json
          echo "✅ GCP credentials file created."

      # 4. Set gcloud project and activate service account (moved earlier for kubectl)
      - name: Set gcloud Project and Activate Service Account
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Setting gcloud project..."
          gcloud config set project ${{ secrets.GCP_PROJECT }}
          echo "Activating GCP service account..."
          gcloud auth activate-service-account --key-file=gcp_credentials.json

      # 5. Configure kubectl to access the cluster
      - name: Configure kubectl
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Configuring kubectl for cluster 'gym-cluster'..."
          gcloud container clusters get-credentials gym-cluster --region ${{ secrets.GCP_REGION }} --project ${{ secrets.GCP_PROJECT }}

      # 6. Enhanced Namespace Cleanup
      - name: Enhanced Namespace Cleanup
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Starting enhanced namespace cleanup for 'gym-namespace'..."
          if kubectl get namespace gym-namespace >/dev/null 2>&1; then
            echo "Namespace 'gym-namespace' exists. Checking phase..."
            NS_PHASE=$(kubectl get namespace gym-namespace -o jsonpath='{.status.phase}')
            echo "Namespace phase: $NS_PHASE"
            
            # Delete all resources in the namespace first
            echo "Deleting all resources in 'gym-namespace'..."
            kubectl delete all --all -n gym-namespace --force --grace-period=0 || echo "Some resources already deleted or not found."
            kubectl delete pvc --all -n gym-namespace --force --grace-period=0 || echo "No PVCs found."
            kubectl delete configmap --all -n gym-namespace --force --grace-period=0 || echo "No ConfigMaps found."
            kubectl delete secret --all -n gym-namespace --force --grace-period=0 || echo "No Secrets found."
            
            # Remove finalizers and force delete namespace
            echo "Removing finalizers from 'gym-namespace'..."
            kubectl get namespace gym-namespace -o json | jq 'del(.spec.finalizers)' | kubectl replace --raw "/api/v1/namespaces/gym-namespace/finalize" -f -
            echo "Force deleting namespace 'gym-namespace'..."
            kubectl delete namespace gym-namespace --force --grace-period=0
            
            # Wait for namespace to be fully gone (max 120s)
            for i in {1..24}; do
              if ! kubectl get namespace gym-namespace >/dev/null 2>&1; then
                echo "✅ Namespace 'gym-namespace' successfully deleted."
                break
              fi
              echo "Namespace still exists. Waiting 5 seconds..."
              sleep 5
            done
            
            if kubectl get namespace gym-namespace >/dev/null 2>&1; then
              echo "❌ Namespace 'gym-namespace' still exists after timeout. This may cause Terraform destroy to fail."
            fi
          else
            echo "Namespace 'gym-namespace' not found. Skipping cleanup."
          fi

      # 7. Initialize Terraform
      - name: Terraform Init
        working-directory: terraform
        env:
          TF_VAR_GCP_CREDENTIALS_FILE: "gcp_credentials.json"
          TF_VAR_GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          TF_VAR_GCP_REGION: ${{ secrets.GCP_REGION }}
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: terraform init -input=false -reconfigure

      # 8. Delete the LoadBalancer Service
      - name: Delete LoadBalancer Service
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Deleting Kubernetes Service 'gym-gym-service' in namespace 'gym-namespace'..."
          kubectl delete svc gym-gym-service -n gym-namespace --force --grace-period=0 || echo "Service not found, skipping"

      # 9. Detach instance groups from the backend service
      - name: Detach Instance Groups from Backend Service
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Detaching instance groups from backend service 'gym-backend-service'..."
          gcloud compute backend-services remove-backend gym-backend-service --global --instance-group=gke-gym-cluster-terraform-20250226081-3cfee0a6-grp --instance-group-zone=us-central1-b --quiet || echo "Not attached in us-central1-b, skipping"
          gcloud compute backend-services remove-backend gym-backend-service --global --instance-group=gke-gym-cluster-terraform-20250226081-01d295b6-grp --instance-group-zone=us-central1-c --quiet || echo "Not attached in us-central1-c, skipping"
          gcloud compute backend-services remove-backend gym-backend-service --global --instance-group=gke-gym-cluster-terraform-20250226081-5be5cdfb-grp --instance-group-zone=us-central1-f --quiet || echo "Not attached in us-central1-f, skipping"

      # 10. Delete the backend service
      - name: Delete Backend Service
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Deleting backend service 'gym-backend-service'..."
          gcloud compute backend-services delete gym-backend-service --global --quiet || echo "Backend service not found, skipping"

      # 11. Wait for Backend Service Deletion
      - name: Wait for Backend Service Deletion
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Waiting for backend service 'gym-backend-service' to be deleted..."
          for i in {1..30}; do
            if ! gcloud compute backend-services list --global | grep -q gym-backend-service; then
              echo "Backend service deleted."
              break
            fi
            echo "Backend service still exists. Waiting 10 seconds..."
            sleep 10
          done

      # 12. Force Delete All Node Pools using gcloud
      - name: Force Delete All Node Pools
        working-directory: terraform
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Listing node pools in cluster 'gym-cluster'..."
          NP_LIST=$(gcloud container node-pools list --cluster gym-cluster --region ${GCP_REGION} --project ${GCP_PROJECT} --format="value(name)")
          if [ -z "$NP_LIST" ]; then
            echo "No node pools found."
          else
            for NP in $NP_LIST; do
              echo "Force deleting node pool '$NP' from cluster 'gym-cluster'..."
              gcloud container node-pools delete "$NP" --cluster gym-cluster --region ${GCP_REGION} --project ${GCP_PROJECT} --quiet
            done
          fi

      # 13. Remove Node Pool from Terraform State
      - name: Remove Node Pool from Terraform State
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Removing google_container_node_pool.primary_nodes from state..."
          terraform state rm google_container_node_pool.primary_nodes || echo "Node pool not in state, skipping"

      # 14. Destroy Remaining Infrastructure with Terraform
      - name: Terraform Destroy
        working-directory: terraform
        env:
          TF_VAR_GCP_CREDENTIALS_FILE: "gcp_credentials.json"
          TF_VAR_GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          TF_VAR_GCP_REGION: ${{ secrets.GCP_REGION }}
          TF_VAR_DATABASE_URL: ${{ secrets.DATABASE_URL }}
          TF_VAR_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          TF_VAR_MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
          TF_VAR_image_tag: "v1.0.${{ github.run_number }}"
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: terraform destroy -auto-approve -input=false