name: Post-CD Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "yes" to confirm destruction'
        required: true

jobs:
  destroy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 1. Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # 3. Decode and create GCP credentials file
      - name: Create GCP Credentials File
        run: |
          mkdir -p terraform
          echo "${{ secrets.GCP_CREDENTIALS_FILE_B64 }}" | base64 --decode > terraform/gcp_credentials.json
          # Verify valid JSON with jq (optional; remove once verified)
          jq . terraform/gcp_credentials.json
          echo "âœ… GCP credentials file created."

      # 4. Initialize Terraform (configure backend, etc.)
      - name: Terraform Init
        working-directory: terraform
        env:
          TF_VAR_GCP_CREDENTIALS_FILE: "gcp_credentials.json"
          TF_VAR_GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          TF_VAR_GCP_REGION: ${{ secrets.GCP_REGION }}
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: terraform init -input=false -reconfigure

      # 5. Delete the LoadBalancer Service (Kubernetes Service)
      - name: Delete LoadBalancer Service
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Deleting Kubernetes Service 'gym-gym-service' in namespace 'gym-namespace'..."
          kubectl delete svc gym-gym-service -n gym-namespace || echo "Service not found, skipping"

      # 6. Detach instance groups from the backend service
      - name: Detach Instance Groups from Backend Service
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Detaching instance groups from backend service 'gym-backend-service'..."
          gcloud compute backend-services remove-backend gym-backend-service --global --instance-group=gke-gym-cluster-terraform-20250226081-3cfee0a6-grp --instance-group-zone=us-central1-b --quiet || echo "Not attached in us-central1-b, skipping"
          gcloud compute backend-services remove-backend gym-backend-service --global --instance-group=gke-gym-cluster-terraform-20250226081-01d295b6-grp --instance-group-zone=us-central1-c --quiet || echo "Not attached in us-central1-c, skipping"
          gcloud compute backend-services remove-backend gym-backend-service --global --instance-group=gke-gym-cluster-terraform-20250226081-5be5cdfb-grp --instance-group-zone=us-central1-f --quiet || echo "Not attached in us-central1-f, skipping"

      # 7. Delete the backend service
      - name: Delete Backend Service
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Deleting backend service 'gym-backend-service'..."
          gcloud compute backend-services delete gym-backend-service --global --quiet || echo "Backend service not found, skipping"

      # 8. Wait until the backend service is fully deleted
      - name: Wait for Backend Service Deletion
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Waiting for backend service 'gym-backend-service' to be deleted..."
          for i in {1..30}; do
            if ! gcloud compute backend-services list --global | grep -q gym-backend-service; then
              echo "Backend service deleted."
              exit 0
            fi
            echo "Backend service still exists. Waiting 10 seconds..."
            sleep 10
          done
          echo "Timed out waiting for backend service deletion."
          exit 1

      # 9. Extra wait for propagation (optional)
      - name: Extra Wait for Propagation
        working-directory: terraform
        run: |
          echo "Sleeping an extra 30 seconds for propagation..."
          sleep 30

      # 10. Activate GCP Service Account (to ensure active credentials)
      - name: Activate GCP Service Account
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Activating GCP service account..."
          gcloud auth activate-service-account --key-file=gcp_credentials.json

      # 11. Force Delete Node Pool using gcloud (with --project flag)
      - name: Force Delete Node Pool
        working-directory: terraform
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Force deleting node pool 'primary_nodes' from cluster 'gym-cluster'..."
          gcloud container node-pools delete primary_nodes --cluster gym-cluster --region ${GCP_REGION} --project ${GCP_PROJECT} --quiet

      # 12. Remove the Node Pool from Terraform state
      - name: Remove Node Pool from Terraform State
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: |
          echo "Removing google_container_node_pool.primary_nodes from state..."
          terraform state rm google_container_node_pool.primary_nodes || echo "Node pool not in state, skipping"

      # 13. Destroy Remaining Infrastructure with Terraform
      - name: Terraform Destroy
        working-directory: terraform
        env:
          TF_VAR_GCP_CREDENTIALS_FILE: "gcp_credentials.json"
          TF_VAR_GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          TF_VAR_GCP_REGION: ${{ secrets.GCP_REGION }}
          TF_VAR_DATABASE_URL: ${{ secrets.DATABASE_URL }}
          TF_VAR_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          TF_VAR_MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
          TF_VAR_image_tag: "v1.0.${{ github.run_number }}"
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
        run: terraform destroy -auto-approve -input=false
