# .github/workflows/cd.yml

name: CD Workflow

on:
  workflow_run:
    workflows:
      - CI Workflow
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Check out code
        uses: actions/checkout@v2

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      # Step 3: Create GCP credentials file for Terraform
      - name: Create GCP credentials file
        run: |
          echo "${{ secrets.GCP_CREDENTIALS_FILE }}" > terraform/gcp_credentials.json
        shell: bash

      # Step 4: Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key_file: terraform/gcp_credentials.json
          export_default_credentials: true

      # Step 5: Apply Terraform Configuration
      - name: Apply Terraform Configuration
        env:
          TF_VAR_GCP_CREDENTIALS_FILE: "terraform/gcp_credentials.json"
          TF_VAR_GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          TF_VAR_GCP_REGION: ${{ secrets.GCP_REGION }}
          TF_VAR_DATABASE_URL: ${{ secrets.DATABASE_URL }}
          TF_VAR_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          TF_VAR_MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        working-directory: terraform
        run: |
          terraform init
          terraform apply -auto-approve

      # Step 6: Configure kubectl to connect to GKE
      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: gym-cluster
          location: ${{ secrets.GCP_REGION }}
          project_id: ${{ secrets.GCP_PROJECT }}

      # Step 7: Apply Kubernetes Manifests
      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f ../k8s/configmap.yaml
          kubectl apply -f ../k8s/secret.yaml
          kubectl apply -f ../k8s/deployment.yaml
          kubectl apply -f ../k8s/service.yaml
        shell: bash

      # Step 8: Retrieve External IP of the Service
      - name: Retrieve External IP
        id: get_ip
        run: |
          echo "Waiting for LoadBalancer IP..."
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get svc gym-service -n gym-namespace -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$EXTERNAL_IP" ]; then
              echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV
              echo "External IP: $EXTERNAL_IP"
              break
            fi
            echo "Attempt $i: External IP not assigned yet. Retrying in 10 seconds..."
            sleep 10
          done

          if [ -z "$EXTERNAL_IP" ]; then
            echo "Failed to retrieve External IP."
            exit 1
          fi

      # Step 9: Output the External IP
      - name: Output External IP
        run: |
          echo "The application is accessible at http://${{ env.EXTERNAL_IP }}"

      # Step 10: Wait for 300 seconds (e.g., to allow services to initialize)
      - name: Wait for 300 seconds
        run: |
          echo "Waiting for 300 seconds..."
          sleep 300

      # Step 11: Destroy Terraform Configuration
      - name: Destroy Terraform Configuration
        env:
          TF_VAR_GCP_CREDENTIALS_FILE: "terraform/gcp_credentials.json"
          TF_VAR_GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          TF_VAR_GCP_REGION: ${{ secrets.GCP_REGION }}
          TF_VAR_DATABASE_URL: ${{ secrets.DATABASE_URL }}
          TF_VAR_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          TF_VAR_MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        working-directory: terraform
        run: |
          terraform destroy -auto-approve

      # Step 12: Push Terraform State to GitHub
      - name: Push Terraform State to GitHub
        env:
          MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        working-directory: terraform
        run: |
          git init
          git config --global user.email "yuvalshmuely8@gmail.com"
          git config --global user.name "NutzKiller"
          git remote add origin https://${{ secrets.MY_GITHUB_TOKEN }}@github.com/NutzKiller/TF.git || true
          git fetch origin main || true
          git checkout -B main || true
          git pull origin main --allow-unrelated-histories --strategy-option ours || true
          git add terraform_state/terraform.tfstate
          git commit -m "Update Terraform state file after destroy" || true
          git push origin main --force
