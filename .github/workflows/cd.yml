name: CD Workflow

on:
  workflow_run:
    workflows:
      - CI Workflow
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the main repository code
      - name: Check out main repository
        uses: actions/checkout@v3

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # Step 3: Create GCP credentials file
      - name: Create GCP credentials file
        run: |
          mkdir -p terraform
          echo "${{ secrets.GCP_CREDENTIALS_FILE_B64 }}" | base64 --decode > terraform/gcp_credentials.json
          echo "âœ… GCP credentials file created."

      # Step 4: Validate GCP Authentication
      - name: Verify GCP Authentication
        run: |
          gcloud auth list
          gcloud config list

      # Step 5: Set up Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key_file: terraform/gcp_credentials.json
          export_default_credentials: true

      # Step 6: Apply Terraform Configuration (Deploys the Helm Release)
      - name: Apply Terraform Configuration
        working-directory: terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "gcp_credentials.json"
          TF_VAR_GCP_CREDENTIALS_FILE: "gcp_credentials.json"
          TF_VAR_GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          TF_VAR_GCP_REGION: ${{ secrets.GCP_REGION }}
          TF_VAR_DATABASE_URL: ${{ secrets.DATABASE_URL }}
          TF_VAR_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          TF_VAR_MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          terraform init -input=false
          terraform apply -auto-approve -input=false

      # Step 7: Configure kubectl to connect to GKE
      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: gym-cluster
          location: ${{ secrets.GCP_REGION }}
          project_id: ${{ secrets.GCP_PROJECT }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: terraform/gcp_credentials.json

      # Step 8: Validate Kubernetes Connection
      - name: Verify Kubernetes Connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      # Step 9: Ensure Firewall Rule for GKE (if not already set)
      - name: Ensure Firewall Rule for GKE
        run: |
          gcloud compute firewall-rules create allow-gke-5000 \
            --allow=tcp:5000 \
            --target-tags=gke-gym-cluster \
            --source-ranges=0.0.0.0/0 || echo "Firewall rule already exists."

      # Step 10: Create Namespace (safe-check)
      - name: Create Namespace
        run: |
          kubectl create namespace gym-namespace || true

      # Step 11: Retrieve External IP of the Helm-Managed Service
      - name: Retrieve External IP of Helm Release Service
        id: get_ip
        run: |
          echo "Waiting for LoadBalancer IP..."
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get svc gym-gym-chart-service -n gym-namespace -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$EXTERNAL_IP" ]; then
              echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV
              echo "External IP: $EXTERNAL_IP"
              break
            fi
            echo "Attempt $i: External IP not assigned yet. Retrying in 10 seconds..."
            sleep 10
          done

          if [ -z "$EXTERNAL_IP" ]; then
            echo "Failed to retrieve External IP."
            exit 1
          fi

      # Step 12: Output the External IP
      - name: Output External IP
        run: |
          echo "The application is accessible at http://${{ env.EXTERNAL_IP }}"

      # Step 13: Debug Kubernetes Setup (if needed)
      - name: Debug Kubernetes Setup
        run: |
          echo "Debugging Kubernetes Configuration..."
          kubectl get svc -n gym-namespace
          kubectl get pods -n gym-namespace
          kubectl describe svc gym-gym-chart-service -n gym-namespace
          kubectl describe deployment gym-gym-chart-deployment -n gym-namespace
