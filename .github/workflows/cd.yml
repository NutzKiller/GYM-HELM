name: CD Workflow

on:
  workflow_run:
    workflows:
      - CI Workflow
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Check out main repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Create GCP credentials file
        run: |
          mkdir -p terraform
          echo "${{ secrets.GCP_CREDENTIALS_FILE_B64 }}" | base64 --decode > terraform/gcp_credentials.json
          jq . terraform/gcp_credentials.json >/dev/null 2>&1 || (echo "Error: Invalid GCP credentials JSON"; exit 1)
          echo "✅ GCP credentials file created."

      - name: Set up Cloud SDK
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_FILE_B64 }}
      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Verify or Recreate GKE Cluster
        env:
          TF_VAR_GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          TF_VAR_GCP_REGION: ${{ secrets.GCP_REGION }}
        run: |
          echo "Checking if cluster 'gym-cluster' exists..."
          if gcloud container clusters list --project=${TF_VAR_GCP_PROJECT} --region=${TF_VAR_GCP_REGION} | grep -q "gym-cluster"; then
            echo "Cluster gym-cluster exists. Configuring kubectl..."
            gcloud container clusters get-credentials gym-cluster --region=${TF_VAR_GCP_REGION} --project=${TF_VAR_GCP_PROJECT}
            kubectl cluster-info || (echo "Cluster exists but is unhealthy"; exit 1)
          else
            echo "Cluster gym-cluster does not exist. Terraform will create it."
          fi

      - name: Clean Up Terminating Namespace
        run: |
          echo "Checking namespace gym-namespace status..."
          if kubectl get namespace gym-namespace >/dev/null 2>&1; then
            echo "Deleting all resources in gym-namespace..."
            kubectl delete all --all -n gym-namespace --force --grace-period=0 || true
            kubectl delete pvc --all -n gym-namespace --force --grace-period=0 || true
            echo "Removing finalizers and force-deleting namespace..."
            kubectl get namespace gym-namespace -o json | jq 'del(.spec.finalizers)' | kubectl replace --raw "/api/v1/namespaces/gym-namespace/finalize" -f - || true
            kubectl delete namespace gym-namespace --force --grace-period=0 || true
            for i in {1..12}; do
              if ! kubectl get namespace gym-namespace >/dev/null 2>&1; then
                echo "✅ Namespace gym-namespace successfully removed."
                break
              fi
              echo "Namespace still exists; waiting 10 seconds..."
              sleep 10
            done
            if kubectl get namespace gym-namespace >/dev/null 2>&1; then
              echo "Error: Namespace gym-namespace could not be removed."
              exit 1
            fi
          else
            echo "Namespace gym-namespace does not exist yet. Proceeding."
          fi

      - name: Initialize Terraform
        working-directory: terraform
        env:
          TF_VAR_GCP_CREDENTIALS_FILE: "gcp_credentials.json"
          TF_VAR_GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          TF_VAR_GCP_REGION: ${{ secrets.GCP_REGION }}
        run: terraform init -input=false -reconfigure

      - name: Apply Terraform Configuration
        working-directory: terraform
        env:
          TF_VAR_GCP_CREDENTIALS_FILE: "gcp_credentials.json"
          TF_VAR_GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          TF_VAR_GCP_REGION: ${{ secrets.GCP_REGION }}
          TF_VAR_DATABASE_URL: ${{ secrets.DATABASE_URL }}
          TF_VAR_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          TF_VAR_MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
          TF_VAR_image_tag: "v1.0.${{ github.run_number }}"
        run: |
          echo "Applying Terraform configuration with retries..."
          for attempt in {1..3}; do
            if terraform apply -auto-approve -input=false 2>terraform-apply-error.log; then
              echo "Terraform applied successfully."
              break
            else
              echo "Attempt $attempt failed. Error details:"
              cat terraform-apply-error.log
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
            if [ "$attempt" -eq 3 ]; then
              echo "Error: Terraform apply failed after 3 attempts."
              exit 1
            fi
          done

      - name: Validate Kubernetes Connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Ensure Firewall Rule for GKE
        run: |
          gcloud compute firewall-rules create allow-gke-5000 \
            --allow=tcp:5000 \
            --target-tags=gke-gym-cluster \
            --source-ranges=0.0.0.0/0 || echo "Firewall rule already exists."

      - name: Retrieve External IP of Helm Release Service
        id: get_ip
        run: |
          echo "Waiting for LoadBalancer IP (up to 5 minutes)..."
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get svc gym-gym-service -n gym-namespace -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
            if [ -n "$EXTERNAL_IP" ]; then
              echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV
              echo "External IP: $EXTERNAL_IP"
              break
            fi
            echo "Attempt $i: External IP not assigned yet. Retrying in 10 seconds..."
            sleep 10
          done
          if [ -z "$EXTERNAL_IP" ]; then
            echo "Failed to retrieve External IP after 5 minutes."
            kubectl describe svc gym-gym-service -n gym-namespace
            exit 1
          fi

      - name: Output External IP
        run: |
          echo "The application is accessible at http://${{ env.EXTERNAL_IP }}"

      - name: Debug Kubernetes Setup
        run: |
          echo "Debugging Kubernetes Configuration..."
          kubectl get svc -n gym-namespace
          kubectl get pods -n gym-namespace
          kubectl describe svc gym-gym-service -n gym-namespace
          kubectl describe deployment gym-gym-deployment -n gym-namespace