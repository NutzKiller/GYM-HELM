name: Cleanup DockerHub and Helm Charts

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "yes" to cleanup DockerHub and Helm charts'
        required: true
        default: 'no'

jobs:
  cleanup:
    if: ${{ github.event.inputs.confirm == 'yes' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # --------------------------
      # 1) DockerHub Cleanup
      # --------------------------
      - name: Cleanup DockerHub repository
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          set -e
          echo "Logging in to DockerHub..."
          TOKEN=$(curl -s -H "Content-Type: application/json" \
            -X POST \
            -d '{"username": "'"$DOCKER_USERNAME"'", "password": "'"$DOCKER_PASSWORD"'"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "Failed to retrieve token"
            exit 1
          fi

          REPO="nutzkiller/gym"
          echo "Fetching tags for repository $REPO..."

          # Fetch up to 100 tags, sort by last_updated (newest first)
          TAGS=$(curl -s -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/$REPO/tags/?page_size=100" \
            | jq -r '.results | sort_by(.last_updated) | reverse | .[].name')

          echo "All tags:"
          echo "$TAGS"

          # Keep only the latest 5 tags
          KEEP_TAGS=$(echo "$TAGS" | head -n 5)
          echo "Tags to keep (latest 5):"
          echo "$KEEP_TAGS"

          # Delete any tag not in the keep list
          for tag in $TAGS; do
            if echo "$KEEP_TAGS" | grep -qx "$tag"; then
              echo "Keeping tag: $tag"
            else
              echo "Deleting tag: $tag"
              curl -s -X DELETE -H "Authorization: JWT $TOKEN" \
                "https://hub.docker.com/v2/repositories/$REPO/tags/$tag/"
            fi
          done

          echo "DockerHub cleanup completed."

      # --------------------------
      # 2) Helm Charts Cleanup
      # --------------------------
      - name: Cleanup Helm Charts
        env:
          MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          set -e
          echo "Cloning GitHub Pages Helm repo to make changes..."
          # Clone the helm repo using your GitHub token
          git clone https://${MY_GITHUB_TOKEN}@github.com/NutzKiller/helm.git helmrepo
          cd helmrepo || exit 1

          set -x

          echo "Installing git-restore-mtime..."
          sudo apt-get update && sudo apt-get install -y git-restore-mtime

          echo "Restoring original modification times..."
          /usr/lib/git-core/git-restore-mtime
          ls -ltr

          echo "Listing .tgz files sorted by oldest first..."
          # Use mapfile to capture all .tgz files sorted oldest first
          mapfile -t TGZ_FILES < <(ls -tr *.tgz 2>/dev/null)
          echo "Found: ${TGZ_FILES[*]}"

          # Delete the oldest files until only 3 remain
          while [ "${#TGZ_FILES[@]}" -gt 3 ]; do
              echo "Deleting: ${TGZ_FILES[0]}"
              rm -f "${TGZ_FILES[0]}"
              TGZ_FILES=("${TGZ_FILES[@]:1}")
          done

          ls

          echo "Regenerating index.yaml to include only the remaining .tgz files..."
          rm -f index.yaml
          helm repo index --url https://nutzkiller.github.io/helm .

          git config --global user.email "heyits@atester"
          git config --global user.name "helm-chart-auto-cleanup"

          git add -A
          git commit -m "Updated index.yaml after older tgzs cleanup"
          git push origin main
          echo "Cleanup completed, changes pushed to GitHub Pages Helm repo."
