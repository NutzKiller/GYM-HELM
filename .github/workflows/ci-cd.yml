name: CI/CD Workflow

on:
  push:
    branches:
      - main  # Trigger the action on push to the main branch
  workflow_dispatch:  # Manually trigger the workflow if needed

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build Docker image
      run: |
        VERSION=v1.0.${{ github.run_number }}
        docker build -t nutzkiller/gym:$VERSION .
        docker tag nutzkiller/gym:$VERSION nutzkiller/gym:latest
    
    - name: Push Docker image to Docker Hub
      run: |
        VERSION=v1.0.${{ github.run_number }}
        docker push nutzkiller/gym:$VERSION
        docker push nutzkiller/gym:latest
    
    - name: Log in to EC2 and deploy
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          echo "Checking if Docker is installed..."
          
          # Install Docker if it's not already installed (for Amazon Linux)
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing Docker..."
            # Update package index and install Docker (Amazon Linux)
            sudo yum update -y
            sudo yum install -y docker
            
            # Start Docker service
            sudo service docker start
            sudo systemctl enable docker
          else
            echo "Docker is already installed."
          fi

          # Add user to Docker group to avoid using sudo for Docker commands
          echo "Adding $USER to the Docker group..."
          sudo usermod -aG docker $USER
          
          # Refresh group membership for the user
          newgrp docker

          echo "Pulling the Docker image on EC2..."
          docker pull nutzkiller/gym:latest
          
          echo "Stopping any existing containers running the app..."
          docker stop gym_app || true
          docker rm gym_app || true
          
          echo "Running the new Docker container..."
          docker run -d --rm --name gym_app -p 5000:5000 nutzkiller/gym:latest
          
          # Optional: Restart a service after container deployment
          echo "Restarting related service..."
          sudo systemctl restart apache2 || sudo systemctl restart nginx || true
          
          # Optionally add other steps such as notifications or further setup
          echo "Deployment complete!"

          